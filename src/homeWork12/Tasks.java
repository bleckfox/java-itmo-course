package homeWork12;

import java.io.FileNotFoundException;
import java.nio.file.AccessDeniedException;
import java.util.jar.JarException;

public class Tasks {
    public static void main(String[] args) {
        try {
            throwException(Status.FILE_NOT_FOUND);
            throwException(Status.ACCESS_DENIED);
            throwException(Status.JAR_ERROR);
        }
        catch (AccessDeniedException e) {
            System.out.println(e.getMessage());
            throw new RuntimeException(e);
        }
        catch (JarException | FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    enum Status {
        FILE_NOT_FOUND, ACCESS_DENIED, JAR_ERROR
    }

    private static void throwException(Status status) throws JarException, FileNotFoundException, AccessDeniedException {
        switch (status){
            case FILE_NOT_FOUND -> throw new FileNotFoundException("File not found exception");
            case ACCESS_DENIED -> throw new AccessDeniedException("Access denied exception");
            case JAR_ERROR -> throw new JarException("Jar exception");
        }
    }

    // Задача на самостоятельное изучение ---

    // 1. Что такое обертки над примитивами?
    /*
        Обертки над примитивами в Java представляют классы, которые обеспечивают упаковку (обертку)
        примитивных типов данных в объекты. Каждый примитивный тип данных в Java имеет
        соответствующий ему класс-обертку. Обертки над примитивами позволяют использовать
        примитивные типы данных как объекты в контексте объектно-ориентированного программирования.

        Вот список оберток над примитивами в Java:
            Boolean - обертка над типом boolean.
            Byte - обертка над типом byte.
            Short - обертка над типом short.
            Integer - обертка над типом int.
            Long - обертка над типом long.
            Float - обертка над типом float.
            Double - обертка над типом double.
            Character - обертка над типом char.

        Обертки над примитивами предоставляют ряд полезных методов и функциональности,
        которые не доступны для примитивных типов данных. Например, обертки позволяют
        преобразовывать значения в другие типы, выполнять сравнение, выполнять арифметические
        операции и многое другое. Обертки также используются при работе с коллекциями,
        потому что коллекции могут хранить только объекты, а не примитивные типы данных.

        Java обеспечивает автоупаковку (autoboxing) и автораспаковку (unboxing), что позволяет
        автоматически преобразовывать примитивные типы в соответствующие им обертки и обратно
        без явного вызова конструкторов или методов.

        Integer num1 = new Integer(10); // Создание объекта-обертки Integer
        int num2 = num1.intValue(); // Распаковка значения в примитивный тип int

        Double d1 = 3.14; // Автоупаковка значения типа double в объект-обертку Double
        double d2 = d1; // Автораспаковка значения из объекта-обертки Double в примитивный тип double

        Boolean bool1 = Boolean.valueOf(true); // Создание объекта-обертки Boolean
        boolean bool2 = bool1.booleanValue(); // Распаковка значения в примитивный тип boolean

     */

    // 2. Когда лучше использовать примитивы, а когда соответствующие классы-обертки?
    /*
        Когда использовать примитивы:
            Нужно простое хранение значения без дополнительной функциональности или операций.
            Работа с большими объемами данных, где каждый байт памяти имеет значение.
                Примитивы занимают меньше места в памяти, чем соответствующие обертки.
            Множество арифметических операций или операций сравнения.
                Примитивы имеют более эффективные вычисления и операции.
     */

    // 3. Что такое автоупаковка?
    /*
        Автоупаковка (autoboxing) - это функция в Java, которая позволяет автоматически
        преобразовывать примитивные типы данных в соответствующие им классы-обертки.
        Автоупаковка происходит при необходимости использования примитивного типа в
        контексте, где требуется объект-обертка.

        С помощью автоупаковки Java автоматически выполняет следующие преобразования:

        Преобразование примитивных типов в соответствующие им классы-обертки:
            int в Integer
            long в Long
            float в Float
            double в Double
            boolean в Boolean
            byte в Byte
            short в Short
            char в Character

        Автоупаковка облегчает работу с примитивными типами данных, позволяя использовать
        их как объекты в контексте объектно-ориентированного программирования. Это упрощает
        кодирование и делает его более понятным и гибким, так как не требуется явное
        преобразование между примитивами и обертками.
     */

    // 4. Что такое автораспаковка?
    /*
        Автораспаковка (unboxing) - это функция в Java, которая позволяет автоматически
        преобразовывать объекты-обертки в соответствующие им примитивные типы данных.
        Автораспаковка происходит при необходимости использования значения объекта-обертки
        в контексте, где требуется примитивный тип.

        С помощью автораспаковки Java автоматически выполняет следующие преобразования:

        Преобразование объектов-оберток в соответствующие им примитивные типы:
            Integer в int
            Long в long
            Float в float
            Double в double
            Boolean в boolean
            Byte в byte
            Short в short
            Character в char

        Автораспаковка позволяет использовать объекты-обертки как обычные примитивные типы
        данных без необходимости явного извлечения значения из обертки. Это делает код более
        читабельным и удобным для работы с примитивными типами в контексте объектно-ориентированного
        программирования.
     */

    // 5. Основные правила автоупаковки и автораспаковки?
    /*
        Автоупаковка:
            Примитивные типы могут быть автоматически упакованы в соответствующие им классы-обертки.
            Автоупаковка происходит при необходимости использования примитивного типа в контексте,
                где требуется объект-обертка.
            Автоупаковка происходит при присваивании значения примитивной переменной переменной
                типа обертки или при передаче примитивного значения в метод, ожидающий
                аргумент типа обертки.

        Автораспаковка:
            Объекты-обертки могут быть автоматически распакованы в соответствующие им
                примитивные типы данных.
            Автораспаковка происходит при необходимости использования значения объекта-обертки
                в контексте, где требуется примитивный тип.
            Автораспаковка происходит при присваивании значения объекта-обертки примитивной
                переменной или при передаче значения объекта-обертки в метод, ожидающий
                аргумент примитивного типа.

        Автоупаковка и автораспаковка работают в паре:
            При необходимости автоупаковки автоматически выполняется автораспаковка, и наоборот.
            Например, при присваивании значения примитивной переменной переменной типа
                обертки происходит автоупаковка, а при присваивании значения объекта-обертки
                примитивной переменной происходит автораспаковка.

        Автоупаковка и автораспаковка работают только между примитивными типами и
            соответствующими им классами-обертками. Нельзя выполнить автоупаковку или
            автораспаковку между разными типами или несовместимыми классами-обертками.

        Автоупаковка и автораспаковка выполняются компилятором автоматически.
            Разработчику не требуется явно вызывать методы упаковки или распаковки.

        Операции автоупаковки и автораспаковки могут повлечь за собой дополнительные затраты
            на производительность и использование памяти.
     */

    // 6. Полезные методы оберток над примитивами?
    /*
        intValue(), longValue(), floatValue(), doubleValue(), booleanValue(), byteValue(),
        shortValue(), charValue():
            Эти методы возвращают примитивное значение, соответствующее объекту-обертке.

        toString():
            Метод toString() преобразует объект-обертку в строковое представление.

        parseXxx(String s):
            Это статические методы классов-оберток, которые преобразуют строку в
            соответствующий примитивный тип. Например, Integer.parseInt("10") преобразует
            строку "10" в целое число.

        valueOf(xxx):
            Это статические методы классов-оберток, которые создают объект-обертку из
            переданного значения. Например, Integer.valueOf(10) создает объект Integer
            с значением 10.

        compareTo(xxx):
            Этот метод сравнивает объект-обертку с другим объектом того же типа и
            возвращает отрицательное значение, ноль или положительное значение,
            в зависимости от результата сравнения.

        equals(Object obj):
            Метод equals() сравнивает объект-обертку с другим объектом на равенство.

        hashCode():
            Метод hashCode() возвращает хеш-код объекта-обертки.

        valueOf(boolean b):
            Метод valueOf() возвращает объект Boolean, представляющий переданное логическое значение.

        isNaN(), isInfinite():
            Эти методы доступны для классов-оберток Double и Float и позволяют проверить,
            является ли значение не числом (NaN) или бесконечностью.
     */

}
