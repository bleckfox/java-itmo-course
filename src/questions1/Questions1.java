package questions1;

import java.util.Scanner;

public class Questions1 {

    // 1. Что означает инициализация переменной?
    /*
        Инициализация переменной означает присвоение начального значения переменной
        при её создании. Когда объявляется переменная, компьютер выделяет
        ей определенное место в памяти для хранения данных. Но пока ей не
        присвоено значение, это место в памяти может содержать случайные
        или непредсказуемые данные.

        Инициализация переменной позволяет задать начальное значение,
        которое будет использоваться до тех пор, пока в переменную не
        будет присвоено другое значение.
        Это делает переменную более предсказуемой и позволяет избежать ошибок,
        связанных с чтением случайных данных.
     */

    // 2. Из каких символов может состоять имя переменной?
    /*
        В языке Java имя переменной может состоять из следующих символов:

            Буквы (строчные и заглавные): от 'a' до 'z' и от 'A' до 'Z'.
            Цифры: от '0' до '9', но имя переменной не может начинаться с цифры.
            Символ подчеркивания ('_'): можно использовать его в любом месте в имени переменной,
                кроме начала.
            Долларовый знак ('$'): также можно использовать его в любом месте в имени переменной,
                кроме начала.

        Важно помнить следующие правила при именовании переменных в Java:

            Имя переменной должно начинаться с буквы, символа подчеркивания или долларового знака.
            Имя переменной может содержать комбинацию букв, цифр,
                символа подчеркивания и долларового знака.
            Имена переменных чувствительны к регистру, то есть "myVariable" и "myvariable"
                считаются разными именами переменных.

        Примеры корректных имен переменных в Java:
            int age;
            String myName;
            double _salary;
            boolean is_valid;
            int numberOfApples$;

        Примеры некорректных имен переменных в Java:
            int 123abc;         -> начинается с цифры
            float my-variable;  -> содержит дефис вместо символа подчеркивания
            String $name$;      -> начинается с долларового знака
            boolean is-valid;   -> содержит дефис вместо символа подчеркивания
     */

    // 3. Будет ли ошибкой использование кириллических символов в именах переменных?
    /*
        В языке Java использование кириллических символов в именах переменных не является
        стандартной практикой, и такое использование может вызвать проблемы и ошибки компиляции.

        Согласно спецификации Java (Java Language Specification), идентификаторы
        включая имена переменных) должны состоять только из символов из набора Unicode,
        который включает в себя латинские буквы, цифры, символы подчеркивания и долларовый знак.
        Кириллические символы не входят в этот набор символов.

        Хотя некоторые Java-компиляторы могут позволять использование кириллицы в именах
        переменных, это не рекомендуется. Такие имена могут вызывать проблемы совместимости,
        особенно если используются сторонние библиотеки.
     */

    // 4. Какие примитивные типы есть в Java?
    /*
        byte:
            8-битное целое число со знаком.
            Диапазон значений от -128 до 127.
        short:
            16-битное целое число со знаком.
            Диапазон значений от -32,768 до 32,767.
        int:
            32-битное целое число со знаком.
            Диапазон значений от -2,147,483,648 до 2,147,483,647.
        long:
            64-битное целое число со знаком.
            Диапазон значений от -9,223,372,036,854,775,808 до 9,223,372,036,854,775,807.
        float:
            32-битное число с плавающей запятой одинарной точности.
            Используется для представления десятичных чисел.
            Диапазон значений примерно от ±1.4e-45 до ±3.4e+38.
        double:
            64-битное число с плавающей запятой двойной точности.
            Используется для представления десятичных чисел.
            Диапазон значений примерно от ±4.9e-324 до ±1.7e+308.
        boolean:
            логический тип данных, который принимает значение либо true, либо false.
        char:
            16-битный символьный тип данных, представляющий отдельный символ в кодировке Unicode.
     */

    // 5. Что такое var?
    /*
        var - локальная переменная с неявным типом. Добавлена в Java 10.
        Компилятор Java автоматически определяет тип переменной на основе выражения,
        которое присваивается переменной при инициализации.
        Это означает, что можно опустить явное указание типа переменной.

        Примеры:
            var age = 25; // тип переменной int
            var name = "John"; // тип переменной String
            var list = new ArrayList<String>(); // тип переменной ArrayList<String>

        Переменные, объявленные с использованием var, должны быть инициализированы при объявлении.
        Важно отметить, что тип переменной, определенной с помощью var, является неизменным
        после инициализации. Компилятор статически определяет тип и использует его для
        проверки типов и выполнения кода. Это означает, что var не является динамическим
        типом или вариантом.
     */

    // 6. Сколько байт занимает в памяти переменная типа long?
    /*
        В Java переменная типа long занимает 8 байт (64 бита) в памяти.
     */

    // 7. Что такое явное приведение типов?
    /*
        Явное приведение типов, также известное как явное преобразование типов, это процесс,
         при котором значение одного типа данных преобразуется в значение другого типа данных.

        В Java явное приведение типов выполняется с использованием оператора приведения (тип).
        Синтаксис выглядит следующим образом:
            тип_назначения переменная_назначения = (тип_назначения) переменная_источник;

        Пример явного приведения типов:
            double x = 3.14;
            int y = (int) x; // Явное приведение типа double к int
     */

    // 8. Какой тип данных мы получим в результате сложения short и byte?
    /*
        В результате сложения получится тип int.
        Это связано с правилами автоматического расширения типов (type promotion) при
        выполнении арифметических операций. В данном случае, если оператор "+"
        применяется к операндам типа short и byte, они автоматически преобразуются
        к типу int перед выполнением операции сложения.
     */

    // 9. Какой тип данных мы получим в результате сложения long и float?
    /*
        В результате сложения получится тип float.
        При сложении long и float тип long будет преобразован в тип float,
        поскольку float может представить более широкий диапазон значений, чем long.
        В результате получится значение типа float.
     */

    // 10. Как работает оператор && ?
    /*
        Оператор && является логическим оператором "логическое И" (AND).
        Он используется для комбинирования условий и возвращает значение true,
        если оба операнда равны true. В противном случае, если хотя бы один из
        операндов равен false, оператор && вернет значение false.

        Оператор && выполняет "краткое замыкание" (short-circuiting), что означает,
        что второй операнд не будет вычислен, если значение первого операнда уже
        определило результат выражения.
     */

    // 11. Что такое тело цикла?
    /*
        Тело цикла представляет собой блок кода, содержащий набор инструкций,
        которые выполняются многократно до тех пор, пока условие цикла истинно.
        Тело цикла определяется с помощью фигурных скобок {} и может содержать одну
        или несколько инструкций.
        Существует несколько типов циклов в Java, таких как for, while и do-while,
        и в каждом из них тело цикла определяется по-разному.
     */

    // 12. Что такое итерация цикла?
    /*
        Итерация цикла в Java относится к одному выполнению тела цикла.
        Когда цикл выполняется, код внутри его тела выполняется один раз.
        Затем происходит проверка условия цикла, и если условие истинно, тело цикла
        выполняется снова. Этот процесс повторяется до тех пор, пока условие
        цикла не станет ложным.
     */

    // 13. Каким образом можно прервать выполнение цикла?
    /*
        Использование оператора break: Оператор break используется для немедленного
        выхода из цикла. Когда break выполняется внутри цикла, выполнение цикла
        прекращается, и управление передается следующему оператору после цикла.

        Использование оператора return: Если цикл находится внутри метода,
        можно использовать оператор return для немедленного выхода из метода.
        Когда return выполняется, выполнение метода прекращается и управление
        возвращается вызывающему коду.

        Использование метки (label) и оператора break: Если есть вложенные циклы,
        можно использовать метку для указания конкретного цикла,
        из которого нужно выйти при помощи оператора break.
        Пример:
            outerLoop:
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 3; j++) {
                    if (i == 2 && j == 1) {
                        break outerLoop; // Выход из внешнего цикла
                    }
                    System.out.println("i = " + i + ", j = " + j);
                }

        Операторы break и return прерывают только ближайший окружающий цикл или метод
     */

    // 14. Как будет работать следующее ветвление,
        // если значение переменной равно 18
        // если значение переменной равно 14?
        // if (age >= 18) System.out.println("Вы можете просматривать товары и совершать покупки");
        // else if (age < 18) System.out.println("Вы можете просматривать товары, но не совершать покупки");
    /*
        В первом случае сработает первый блок if.
        Во втором случае сработает второй блок else if, т.к. 14 меньше 18
     */

    // 15. Для чего программам нужен метод main?
    /*
        Метод main в Java является точкой входа (entry point) для программы.
        Запускается Java-приложение, виртуальная машина Java (JVM) ищет метод main в классе,
        указанном в командной строке или в файле манифеста JAR-файла, и начинает
        выполнение программы с этого метода.
     */

    public static void main(String[] args) {

        // 16. Какой тип данных переменной z?
        var x = 100;
        var y = 7L;
        var z = x + y;

            // z -> имеет тип long
            // поскольку long может представить более широкий диапазон значений, чем int.

        // 17. Какой тип данных переменной in01?
        var in01 = new Scanner(System.in);

            // in01 -> имеет тип Scanner

        // 18. В чём причина ошибки? Как исправьте ?
        var code = 1;
        // code = 1;

            // нужна инициализация

        // 19. Найти и исправить ошибки
        String login = "qwerty";
        String token = "22ffr";
        if (login.equals("qwerty") && token.equals("22ffr")) {
            System.out.println("Токен и логин указаны верно, Вы вошли в систему");
        }
            // для авторизации используем И не ИЛИ
            // для сранения использовать equals()

        // 20. Найти и исправить ошибки
        var in02 = new Scanner(System.in);
        System.out.println("Введите возраст");
        int age = in02.nextInt();
        System.out.println(age);
        if (age < 18 || age > 200) {
            System.out.println("Вы не можете совершать покупки");
        } else if (age >= 18 && age <= 200) {
            System.out.println("Вы можете совершать покупки");
        }
            // меньше 18 ИЛИ больше 200
            // больше равно 18 И меньше равно 200

        // 21. Найти и исправить ошибки
        var in03 = new Scanner(System.in);
        System.out.println("Где хранятся строки в Java? Введите один из вариантов: пул строк, куча, хранилище строк.");
        String answer = in03.next().toLowerCase();
        switch (answer) {
            case "пул строк":
                System.out.println("Вы ввели верный вариант");
                break;
            case "куча":
                System.out.println("Вы правы, но лучше уточнить");
                break;
            // case "хранилище строк": --- ничего не делает
            default:
                System.out.println("Вы ошиблись");
                break;
        }
            // добавлена строка break;


        // 22. Найти и исправить ошибку в решении задачи:
        // напечатать числа от 100 до 0, включая 100 и 0
        int start = 100;
        while (start > 0) {
            --start;
            System.out.println(start);
        }
            // поменял местами вывод и уменьшение
            // добавил проверку равенства 0 (>=)


        // 23. Сколько раз будут выполнены инструкции из тела цикла?
        int first = 1, last = 15;
        for (; first > last; first++) {
            System.out.println(first);
        }
            // не выполнится т.к. условие всегда false


        // 24. Ответьте на вопросы:
            // 1. к какому блоку цикла for перейдет программа, когда значение переменной i будет
                // равно 15, к проверке условия или обновлению счётчиков?
            // 2. Сколько раз произойдёт инициализация переменной i?
        for (int i = 0; i < 30; i++) {
            if (i == 15) continue;
            System.out.println(i);
        }
            // провека условия (на i = 15 вывода в консоль не будет)
            // инициализировали 1 раз, дальше увеличиваем значение

    }
}
